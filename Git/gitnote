Repository 仓库 仓库用来存放项目代码，每个项目对应一个仓库，多个开源项目则有多个仓库
Star 收藏 方便下次查看
Fork 复制克隆项目 生成一个独立一模一样的的仓库
Pull Request 发起请求 基于fork的，在克隆项目上做了修改想要让原始项目发生修改则发起请求修改
Watch 关注 关注项目，当项目更新可以收到通知
lssue 事务卡片 发现代码bug，但是目前没有成型代码，需要讨论时用

安装GitHub：
1.下载安装包
2.点击安装
3.选择安装目录
4.选择组件 除了128都打勾
5.选择命令行使用环境 Use Git from Git Bash only
6.next安装完成

Git初始化及仓库创建和操作
设置用户信息
1.设置用户名： git config --global user.name '用户名'
2.设置用户名邮箱：git config --global user.email '邮箱名'
3.查看配置消息：git config --list

alias：别名，代码太长了用别名替代
创建别名：生成一个.bashrc文件 touch ~/.bashrc
在文件中输入以下内容：
alias git-log='git log --pretty=oneline --all --graph --abbrev-commit'
alias ll='ls -al'
source ~/.bashrc

解决gitBash乱码问题:
打开gitBash执行：git config --global core.quotepath false
${git_home}/etc/bash.bashrc文件最后加入下面两行：
export LANG="zh_CN.UTF-8"
export LC_ALL="zh_CN.UTF-8"

获取本地仓库：
1.创建文件夹： mkdir 目录名
2.在文件内初始化git(创建git仓库)：
	cd 目录名
	git init：初始化当前目录为一个git仓库，初始后会出现一个.git目录

文件状态：
untracked：未跟踪，新创建的一个文件
Unstaged：未暂存，修改已有的文件
staged：已暂存，提交到缓存区的文件

添加文件：
1.创建文件： touch 文件名
2.添加到暂存区：git add 文件名
3.添加到仓库：git commit -m '描述信息'

删除文件：
1. rm -rf 文件名
2. git rm 文件名
3. git commit -m '描述信息'

Git工作流程：1 -> 2 -> 3
1.工作区(Working Directory)：添加、编辑、修改文件等动作
2.暂存区：暂存已经修改的文件到最后统一提交到git仓库中
3.Git Repository(Git 仓库)：最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见

git add 文件名：把文件从工作区提交到暂存区
git status：查看文件状态
git commit -m "提交描述"：将缓存区的提交到Git仓库
git log [options]:查看提交的信息
	options:
		--all 显示所以分支
		--pretty==oneline 将提交信息显示为一行
		--abbrev-commit 使得输出的commitld更简短
		--graph 以图的形式显示
git reset --hard commitid：版本回退
git reflog：查看操作日志

添加文件到忽略列表：不希望有些文件纳入Git的管理，也不希望出现在未跟踪文件列。通常都是自动生成的文件，比如日志文件。在这种情况下，在工作目录底下创建一个.gitignore的文件(文件名固定)，列出要忽略的文件模式。eg：../*.txt

分支：几乎所有的版本控制系统都以某种形式支持分支。和主线互不影响
git branch：查看分支
git branch 分支名：创建分支
git checkout [-b] 分支名：[如果不存在则创建]切换分支
HEAD指向谁，谁就是当前分支
git merge 分支名：合并分支，一般是把别的分支合并到master
git branch -d 分支名：删除分支时，需要做各种检查
git branch -D 分支名：不做任何检查，强制删除

快进：就是在子分支上比master多一次提交，然后采用合并，就相当于快进。

解决冲突：当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时候就需要手动解决：
1.处理文件中冲突的地方
2.将解决完冲突的文件加入暂存区(add)
3.提交到仓库(commit)

开发中分支的使用原则与流程：
master：生产分支，线上分支，主分支，中小规模项目作为线上运行的应用对应的分支
develop：开发分支，从master创建的分支，一般作为开发部门的主要开发分支，如果没有其它并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要合并到master分支，准备上线
feature：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，完成后合并到develop分支
hotfix：从master派生的分支，一般作为线上bug的修复使用，修复完成后要合并到master，test，develop分支
其它分支：比如test代码测试分支，pre线上预分支

远程仓库
添加远程仓库：
1.在远程创建一个仓库，在本地创建一个文件夹
2.进入文件夹进行初始化操作：git init
3.生成远程密钥：ssh-keygen -t rsa 然后回车回车
4.查看密钥：cat ~/.ssh/id_rsa.pub
5.复制密钥到远程然后点击设置ssh公钥然后添加密钥。
6.复制仓库ssh(比如：git@gitee.com:mshx1/git_test.git)
7.添加远程仓库到本地：git remote add origin git@gitee.com:mshx1/git_test.git
查看远程仓库：
git remote [-v]：查看远程仓库[查看详细信息] 
git remote remove origin：删除远程仓库
git remote add origin <远程git repository URL>：添加远程仓库
推送到远程仓库：
命令：git push [-f] [--set-upstream] [远端名称[本地分支名][:远端分支名]]
如果远程分支名和本地分支名称相同，则可以只写本地分支git push origin master
--set-upstream推送到远端的同时并且建立起远端分支的关联关系：git push --set-upstream origin master
如果当前分支和远端分支关联，可以省略分支名和远端名：git push
[-f]是如果在本地和远程都对那个文件进行了修改，那么就强制覆盖
git branch -vv 查看本地分支和远程分支的对应关系

从远程仓库克隆：
目的：将远程仓库(github对应的项目)复制到本地
代码：git clone 下载地址(比如：https://github.com/1mshx/scala.git)
从远程仓库抓取和拉取：
抓取命令：git fetch [remote name][branch name]
抓取指令是将仓库里的更新都抓取到本地，不会进行合并。如果不指定远程名称和分支名，则抓取所有分支
拉取命令：git pull [remote name][branch name]
拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge。如果不指定远程名称和分支名，则抓取所有分支
解决合并冲冲突：先使用pull再使用push

创建个人网站：
个人站点：访问 https：//用户名.github.io
搭建步骤：
1.创建个人站点  -> 新建仓库(仓库名必须是用户名.github.io)
github pages 仅支持静态网页
仓库里面只能是.html文件
