MongoDB

基本概念：MongoDB是一个开源文档型数据库，提供高性能，高可用和自动扩展功能。

MongoDB特点：
1.高性能：
2.高可用：体现在对副本集Replication的支持上
3.可伸缩：体现在分片集群的部署方式上
4.易部署：
5.易使用：
6.存储数据十分方便：

MongoDB主要特性：
1.面向集合存储
2.易于存储对象类型的数据
3.模式自由、支持动态查询
4.支持完全索引
5.支持复制和故障恢复
6.使用高效的二进制数据存储
7.文件格式为BSON(JSON的一种扩展)等。

文档型数据库的存储结构分为四个层次，从小到大为：
1.键值对：文档数据库存储的基本单位；按照复杂程度可以分为基本键值对和嵌套键值对
2.文档：MongoDB的核心概念，是数据的基本单元，相当于关系数据库的行。是一组有序的键值对集合。使用方法有嵌套和引用，各有各的优点
3.集合：将文档存储在集合中。相当于一个表
4.数据库：包含文档和集合

数据类型：MongoDB存储的数据格式是BSON，一种基于JSON的二进制序列化格式。

BSON改进的主要特性：
1.更快的遍历速度：BSON元素的头部有一个区域用来存储元素的长度，遍历时方便跳过文档读取
2.操作更简易
3.支持更多的数据类型

数据库类型：
admin：权限数据库，添加用户到改数据库中，该用户会自动继承数据库的所有权限
local：数据库中的数据用于不会被复制
config：分片时，config数据库在内部使用，保存分片信息
test：默认数据库，可以用来进行各种测试
自定义数据库：根据应用系统的需求建立的业务数据库

数据库操作：
use 数据库名:连接数据库，如果不存在则创建
show dbs：列出所有具有数据的数据库，如果一个数据库没有任何集合或文档，则在 `show dbs` 结果中将不会显示该数据库。
db.stats()：统计数据库信息，在使用前一定要use切换到数据库，否则会出错
db.dropDatabase()：删除当前数据库
db.getCollectionNames()：查询当前数据库下所有的集合

集合操作：
集合的创建有显式和隐式两种方法，显式通过db.createCollection(name,options)方法创建，options是可选项，指定内存大小和索引等
options的参数：
	参数       类型
	capped   Boolean   如果为true，就是有最大值，在达到上限自动覆盖最旧的条目。如果是true，还需要指定size参数
	size       数字     指定上限集合的大小
	max        数字     指定上限集合中的最大文档数
eg：db.createCollection("myDB",{capped:true,size:6142800,max:10000})
隐式创建就是在插入文档时，如果集合不存在则自动创建
eg：db.myDB.insert({"name":"tom"})
Show collections:查看集合的详细信息
db.集合名字.renameCollection("集合名字")：对集合进行重命名
db.集合名字.drop()：删除集合

文档操作(文档是有序的，相同键值不同顺序也是不同的文档)：
插入：
	db.collection.insert(    //db数据库名，collection集合名
	<document or array  of documents>,    //表示可插入一条或多条文档
	{
		wirteConcern:<document>,   //可选字段，表示自定义写出错的级别，是一种出错捕捉机制。
		ordered:<boolean>    //可选字段，默认为true，表示进行有序插入，如果一个文档发生错误，就不执行后面的了。如果为false，无序插入，出现插入错误则跳过。
	})
插入不指定_id字段的文档
eg：db.test.insert({item:"card",qty:15})    //可以插入多条数据
在插入期间，mongodb会创建_id字段并为它分配唯一的ObjectID值
也可以用变量方式插入：
eg:a=({item:"card",qty:15})     db.test.insert(a)
db.集合名.find()：查看集合文档
MongoDB3.2更新后新增了两种文档插入指令:
db.collwxtion.insertOne()：插入一条
db.collwxtion.insertMany()：插入多条

更新：update()和save()
update:
	db.collection.update(
	<query>,    //参数设置查询条件
	<update>,    //更新操作符
	{
		Upsert,    //布尔型可选项，如果不存在update记录，是否插入这个新文档。true为插入，默认为false为不插入
		multi,    //也是布尔型可选项，默认为false，只更新找到的第一条记录。如果为true，则把按条件查询出来的记录全部更新
		writeConcern,    //表示出错级别
		collation    //指定语言
	})
eg：将item为card的数量qty更正为35;
	db.test.update(
	{item:"card"},
	{$set:{qty:35}})

save:
	db.collection.save(obj)    //obj代表更新的对象，这个相当于插入，如果有相同id字段的就替换这个进去，没有就插入这个
eg：db.products.save({_id:100,item:"water",qty:30})

删除：remove()
	db.collection.remove(
	<query>,    //必选项，设置删除文档的条件
	{
		justOne:<bollean>,wrietConcern:<document>    //justOne为布尔型的可选项，默认为false，删除所有符合条件的文档，如果为true，则只删除一个，writeConcern表示出错级别
	})
eg：删除title为'MongoDB'的文档
eg：db.test.remove({'title':'MongoDB'})
另外，可以设置比较条件，删除price大于3的文档记录
eg：db.test.remove({price:{$gt:3}})
deleteOne()和deleteMany()也是删除文档的用法

查询：find()
db.collection.find(query,projection)    //query可选项，设置查询条件，projection也是可选项，表示使用投影操作符指定返回的字段，如果忽略此选项，则返回所有字段
为了使查询结果更直观可以使用.pretty()来格式化所有的文档
eg：db.test.find().pretty()
findOne()查询只返回一个文档
查询条件：
操作符       	 		格式                      	实例
等于(=)  	 	{<key>:{<value>}}      		db.test.find({price:24})
小于(<)  	 	{<key>:{$lt:<value>}}		db.test.find({price:{$lt:24}})
大于(>)  	 	{<key>:{$gt:<value>}} 		db.test.find({price:{$gt:24}})
大于等于(>=) 	{<key>:{$gte:<value>}}      db.test.find({price:{$gte:24}})
小于等于(<=) 	{<key>:{$lte:<value>}}      db.test.find({price:{$lte:24}})
不等于(!<)  		{<key>:{$ne:<value>}}       db.test.find({price:{$ne:24}})
与(and) 		 	{key01:value01,key02:value02,...}       		db.test.find({name:"tom",price:24})
或(or)  			{$or[{key01:value01},{key02,value02}...]}       db.test.find({$or[{name:"tom"},{price:24}]})

.limit(n)：限制查询结果的个数n个，不够就返回全部
.skep(n):跳过前面n个文档
.sort()进行排序，1升序，-1降序
$regex:正则表达式
